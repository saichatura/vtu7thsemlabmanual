def AStart(startnode, stopnode):
    openlist = set(startnode)
    closelist = set()
    g = {}  # Stores the heurisitc values
    g[startnode] = 0
    parents = {}
    parents[startnode] = startnode

    while len(openlist) > 0:
        node = None
        for vertex in openlist:
            if node == None or g[vertex] + heuristic(vertex) < g[node] < heuristic(node):
                node = vertex

        if node == stopnode or Graph_nodes[node] == None:
            pass

        else:
            for (neighbor, weight) in get_neighbors(node):
                if neighbor not in openlist and neighbor not in closelist:
                    openlist.add(neighbor)
                    parents[neighbor] = node
                    g[neighbor] = g[node] + weight
                else:
                    if g[neighbor] > g[node] + weight:
                        g[neighbor] = g[node] + weight
                        parents[neighbor] = node
                        if neighbor in closelist:
                            closelist.remove(neighbor)
                            openlist.add(neighbor)

        if node == None:
            print('Path not found')
            return None

        if node == stopnode:
            path = []
            while parents[node] != node:
                path.append(node)
                node = parents[node]
            path.append(startnode)
            path.reverse()
            print('Path found: {}'.format(path))
            return path

        openlist.remove(node)
        closelist.add(node)
    print('Path doesn\'t exist')
    return None


def get_neighbors(vertex):
    if vertex in Graph_nodes:
        return Graph_nodes[vertex]
    else:
        return None


def heuristic(node):
    H_dist = {
        'A': 11,
        'B': 6,
        'C': 99,
        'D': 1,
        'E': 7,
        'G': 0
    }
    return H_dist[node]


Graph_nodes = {
    'A': [('B', 2), ('E', 3)],
    'B': [('C', 1), ('G', 9)],
    'C' : None ,
    'E': [('D', 6)],
    'D': [('G', 1)],
    
}

AStart('A', 'G')




# result

Path found: ['A', 'E', 'D', 'G']
['A', 'E', 'D', 'G']
